public void solveSudoku(char[][] board) {
        solve(board);
    }

    public boolean solve(char[][]board){
     
     for(int row =0;i<board.length;row++){
     for(int col =0;j<board[0].length;col++){
         if(board[row][col]=='.'){
         for(char c = '1' ; c<='9';c++){
          if(isValid(board,row,col,c)){
              board[row][col]=c;
              if(solve(board)){
                  return true;
              }
              board[row][col]='.';
          }
         }
          return false; // Backtrack if no valid number found
         }
     }
     }
     return true; 
    }

    public boolean isValid(char[][]board,int row, int col, char c){
    for(int i =0;i<9;i++){
       if(board[row][i]==c) return false;
       if(board[i][col]==c) return false;
       if(board[ 3*(row/3) +i/3 ][3*(col/3)+i%3]==c ) return false;
    }
     return true;
    }
